 # -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'baitap.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import image
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from PyQt5.QtCore import QTimer
import random
class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(914, 626)
        Dialog.setAutoFillBackground(False)
        self.light = QtWidgets.QLabel(Dialog)
        self.light.setGeometry(QtCore.QRect(350, 140, 101, 91))
        self.light.setStyleSheet("image:url(:/light/light/light_off.png)")
        self.light.setText("")
        self.light.setObjectName("light")
        self.fan = QtWidgets.QLabel(Dialog)
        self.fan.setGeometry(QtCore.QRect(360, 250, 111, 91))
        self.fan.setStyleSheet("image:url(:/fan/fan/fan_off.png)")
        self.fan.setText("")
        self.fan.setObjectName("fan")
        self.air = QtWidgets.QLabel(Dialog)
        self.air.setGeometry(QtCore.QRect(360, 350, 91, 81))
        self.air.setStyleSheet("image:url(:/air/air/air_off.png)")
        self.air.setText("")
        self.air.setObjectName("air")
        self.toggle = QtWidgets.QCheckBox(Dialog)
        self.toggle.setGeometry(QtCore.QRect(210, 270, 51, 31))
        self.toggle.setStyleSheet("QCheckBox::indicator{\n"
"    width: 50px;\n"
"    height: 50px;\n"
"}\n"
"QCheckBox::indicator:checked{\n"
"    image:url(\"C:/Users/lehuu/Documents/IoT/onoff/on.png\")\n"
"}\n"
"QCheckBox::indicator:unchecked{\n"
"    image:url(\"C:/Users/lehuu/Documents/IoT/onoff/off.png\")\n"
"}")
        self.toggle.setText("")
        self.toggle.setObjectName("toggle")
        self.sw = QtWidgets.QCheckBox(Dialog)
        self.sw.setGeometry(QtCore.QRect(210, 350, 70, 51))
        self.sw.setStyleSheet("QCheckBox::indicator{\n"
"    width: 50px;\n"
"    height: 50px;\n"
"}\n"
"QCheckBox::indicator:checked{\n"
"    image:url(\"C:/Users/lehuu/Documents/IoT/sw/swon.png\")\n"
"}\n"
"QCheckBox::indicator:unchecked{\n"
"    image:url(\"C:/Users/lehuu/Documents/IoT/sw/swoff.png\")\n"
"}")
        self.sw.setText("")
        self.sw.setObjectName("sw")
        self.mode1 = QtWidgets.QCheckBox(Dialog)
        self.mode1.setGeometry(QtCore.QRect(40, 160, 81, 61))
        self.mode1.setStyleSheet("QCheckBox::indicator{\n"
"    width: 50px;\n"
"    height: 50px;\n"
"}\n"
"QCheckBox::indicator:checked{\n"
"    image:url(\"C:/Users/lehuu/Documents/IoT/mode/1on.png\")\n"
"}\n"
"QCheckBox::indicator:unchecked{\n"
"    image:url(\"C:/Users/lehuu/Documents/IoT/mode/1off.png\")\n"
"}")
        self.mode1.setText("")
        self.mode1.setObjectName("mode1")
        self.mode2 = QtWidgets.QCheckBox(Dialog)
        self.mode2.setGeometry(QtCore.QRect(40, 250, 71, 61))
        self.mode2.setStyleSheet("QCheckBox::indicator{\n"
"    width: 50px;\n"
"    height: 50px;\n"
"}\n"
"QCheckBox::indicator:checked{\n"
"    image:url(\"C:/Users/lehuu/Documents/IoT/mode/2on.png\")\n"
"}\n"
"QCheckBox::indicator:unchecked{\n"
"    image:url(\"C:/Users/lehuu/Documents/IoT/mode/2off.png\")\n"
"}")
        self.mode2.setText("")
        self.mode2.setObjectName("mode2")
        self.mode3 = QtWidgets.QCheckBox(Dialog)
        self.mode3.setGeometry(QtCore.QRect(40, 330, 71, 91))
        self.mode3.setStyleSheet("QCheckBox::indicator{\n"
"    width: 50px;\n"
"    height: 50px;\n"
"}\n"
"QCheckBox::indicator:checked{\n"
"    image:url(\"C:/Users/lehuu/Documents/IoT/mode/3on.png\")\n"
"}\n"
"QCheckBox::indicator:unchecked{\n"
"    image:url(\"C:/Users/lehuu/Documents/IoT/mode/3off.png\")\n"
"}")
        self.mode3.setText("")
        self.mode3.setObjectName("mode3")
        self.clear = QtWidgets.QPushButton(Dialog)
        self.clear.setGeometry(QtCore.QRect(200, 460, 75, 23))
        self.clear.setObjectName("clear")
        self.exit = QtWidgets.QPushButton(Dialog)
        self.exit.setGeometry(QtCore.QRect(370, 460, 75, 23))
        self.exit.setObjectName("exit")
        self.textBrowser = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser.setGeometry(QtCore.QRect(260, 550, 441, 41))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser_2 = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser_2.setGeometry(QtCore.QRect(330, 20, 241, 41))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.verticalLayoutWidget = QtWidgets.QWidget(Dialog)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(520, 150, 321, 201))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.bieudo = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.bieudo.setContentsMargins(0, 0, 0, 0)
        self.bieudo.setObjectName("bieudo")
        self.splitter_2 = QtWidgets.QSplitter(Dialog)
        self.splitter_2.setGeometry(QtCore.QRect(170, 170, 131, 31))
        self.splitter_2.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_2.setObjectName("splitter_2")
        self.on_btn = QtWidgets.QPushButton(self.splitter_2)
        self.on_btn.setObjectName("on_btn")
        self.off_btn = QtWidgets.QPushButton(self.splitter_2)
        self.off_btn.setObjectName("off_btn")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(Dialog)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(520, 360, 321, 120))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.sensor = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.sensor.setContentsMargins(0, 0, 0, 0)
        self.sensor.setObjectName("sensor")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(650, -10, 191, 121))
        self.label.setStyleSheet("image:url(:/logo/HL.png)")
        self.label.setText("")
        self.label.setObjectName("label")
        self.figure = Figure()
        self.canvas = FigureCanvas(self.figure)
        self.bieudo.addWidget(self.canvas)
        self.sensor_display = QtWidgets.QTextBrowser(self.verticalLayoutWidget_2)
        self.sensor.addWidget(self.sensor_display)

        # Khởi động hàm cập nhật dữ liệu nhiệt độ
        self.start_temperature_sensor()
        ################################################################################

        self.on_btn.clicked.connect(self.turn_on_devices)
        self.off_btn.clicked.connect(self.turn_off_devices)

        self.clear.clicked.connect(self.clearr)
        self.exit.clicked.connect(self.exitt)

        self.toggle.stateChanged.connect(self.update_fan_state)
        self.sw.stateChanged.connect(self.update_air_state)

        self.mode1.stateChanged.connect(lambda: self.set_mode(1))
        self.mode2.stateChanged.connect(lambda: self.set_mode(2))
        self.mode3.stateChanged.connect(lambda: self.set_mode(3))
         # Kết nối các mode với hàm cập nhật biểu đồ
        self.mode1.stateChanged.connect(lambda: self.update_chart(1))
        self.mode2.stateChanged.connect(lambda: self.update_chart(2))
        self.mode3.stateChanged.connect(lambda: self.update_chart(3))
        ################################################################################
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "MainWindow"))
        self.clear.setText(_translate("Dialog", "CLEAR"))
        self.exit.setText(_translate("Dialog", "EXIT"))
        self.textBrowser.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt; font-weight:600;\">Lê Hữu Lương  22119195</span></p></body></html>"))
        self.textBrowser_2.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt; font-weight:600;\">Điều khiển thiết bị</span></p></body></html>"))
        self.on_btn.setText(_translate("Dialog", "ON"))
        self.off_btn.setText(_translate("Dialog", "OFF"))
        ################################################################################
    def set_mode(self, mode):
        if mode == 1 and self.mode1.isChecked():
            self.mode2.setChecked(False)
            self.mode3.setChecked(False)
            self.current_mode = 1
        elif mode == 2 and self.mode2.isChecked():
            self.mode1.setChecked(False)
            self.mode3.setChecked(False)
            self.current_mode = 2
        elif mode == 3 and self.mode3.isChecked():
            self.mode1.setChecked(False)
            self.mode2.setChecked(False)
            self.current_mode = 3

    def turn_on_devices(self):
        if self.current_mode == 1:
            self.light.setStyleSheet("image:url(:/light/light/light1.png)")
        elif self.current_mode == 2:
            self.light.setStyleSheet("image:url(:/light/light/light2.png)")
        elif self.current_mode == 3:
            self.light.setStyleSheet("image:url(:/light/light/light3.png)")

    def turn_off_devices(self):
        self.light.setStyleSheet("image:url(:/light/light/light_off.png)")
        

    def update_fan_state(self, state):
        if state == QtCore.Qt.Checked:
            if self.current_mode == 1:
                self.fan.setStyleSheet("image:url(:/fan/fan/fan1.png)")
            elif self.current_mode == 2:
                self.fan.setStyleSheet("image:url(:/fan/fan/fan2.png)")
            elif self.current_mode == 3:
                self.fan.setStyleSheet("image:url(:/fan/fan/fan3.png)")
        else:
            self.fan.setStyleSheet("image:url(:/fan/fan/fan_off.png)")

    def update_air_state(self, state):
        if state == QtCore.Qt.Checked:
            if self.current_mode == 1:
                self.air.setStyleSheet("image:url(:/air/air/air1.png)")
            elif self.current_mode == 2:
                self.air.setStyleSheet("image:url(:/air/air/air2.png)")
            elif self.current_mode == 3:
                self.air.setStyleSheet("image:url(:/air/air/air3.png)")
        else:
            self.air.setStyleSheet("image:url(:/air/air/air_off.png)")         
    ############################################################################  
    def clearr(self):
        # Hàm clear: Tắt tất cả thiết bị và bỏ chọn tất cả chế độ
        self.light.setStyleSheet("image:url(:/light/light/light_off.png)")
        self.fan.setStyleSheet("image:url(:/fan/fan/fan_off.png)")
        self.air.setStyleSheet("image:url(:/air/air/air_off.png)")
        self.mode1.setChecked(False)
        self.mode2.setChecked(False)
        self.mode3.setChecked(False)
        self.toggle.setChecked(False)
        self.sw.setChecked(False)
        self.current_mode = None

    def exitt(self):
        QtWidgets.QApplication.quit()
    def update_chart(self, mode):
        self.figure.clear()
        energy_data = {
                'light': {1: 20, 2: 40, 3: 70},  # Đèn
                'fan': {1: 30, 2: 50, 3: 90},    # Quạt
                'air': {1: 50, 2: 80, 3: 120}    # Máy điều hòa
        }
        if self.toggle.isChecked() or self.sw.isChecked():  # Kiểm tra nếu đèn hoặc quạt được bật
                energy_usage = [0, 0, 0]  # Khởi tạo danh sách tiêu thụ năng lượng

                if self.toggle.isChecked():  # Nếu đèn được bật
                        energy_usage[0] = energy_data['light'][mode]
                if self.toggle.isChecked():  # Nếu quạt được bật
                        energy_usage[1] = energy_data['fan'][mode]
                if self.sw.isChecked():  # Nếu máy điều hòa được bật
                        energy_usage[2] = energy_data['air'][mode]
                devices = ['Đèn', 'Quạt', 'Điều hòa']
                # Vẽ biểu đồ
                ax = self.figure.add_subplot(111)
                ax.bar(devices, energy_usage, color=['green', 'green', 'green'])
                ax.set_ylabel('Năng lượng (kWh)') 
                ax.set_title(f'Biểu đồ năng lượng mode {mode}')
                ax.set_ylim(0, max(energy_usage) + 20)  
               
                self.canvas.draw()
        else:
                self.figure.clear()  
                self.canvas.draw()        
    def start_temperature_sensor(self):
        
        self.temperature_timer = QTimer()
        self.temperature_timer.timeout.connect(self.update_temperature_sensor)
        self.temperature_timer.start(2000)  # Cập nhật mỗi 2 giây

    def update_temperature_sensor(self):
       
        
        # Kiểm tra trạng thái của máy quạt và máy lạnh
        if self.toggle.isChecked():  # Máy quạt đang bật
                if self.current_mode == 1:
                        fan_temp = random.uniform(25, 30)  # Nhiệt độ cao nhất cho chế độ 1
                elif self.current_mode == 2:
                        fan_temp = random.uniform(24, 28)  # Nhiệt độ trung bình cho chế độ 2
                else:  # Chế độ 3
                        fan_temp = random.uniform(22, 26)  # Nhiệt độ thấp nhất cho chế độ 3
        else:
                fan_temp = None  # Nếu quạt tắt, không cần cập nhật nhiệt độ quạt

        if self.sw.isChecked():  # Máy lạnh đang bật
                if self.current_mode == 1:
                        air_temp = random.uniform(23, 25)  # Nhiệt độ cao nhất cho chế độ 1
                elif self.current_mode == 2:
                        air_temp = random.uniform(20, 23)  # Nhiệt độ trung bình cho chế độ 2
                else:  # Chế độ 3
                        air_temp = random.uniform(16, 20)  # Nhiệt độ thấp nhất cho chế độ 3
        else:
                air_temp = None  # Nếu máy lạnh tắt, không cần cập nhật nhiệt độ máy lạnh

        # Hiển thị nhiệt độ lên QTextBrowser trong phần "sensor"
        display_text = ""
        if fan_temp is not None:
                display_text += f"<p align='center'><b>Nhiệt độ Quạt: {fan_temp:.1f}°C</b></p>"
        if air_temp is not None:
                display_text += f"<p align='center'><b>Nhiệt độ Máy lạnh: {air_temp:.1f}°C</b></p>"

        self.sensor_display.setHtml(display_text)   

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
